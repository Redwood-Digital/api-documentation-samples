openapi: 3.0.3
info:
  title: Bookstore API
  description: RESTful API for managing an online bookstore
  version: 2.0.0
  contact:
    name: Bookstore API Team
    email: api@bookstore.com
servers:
  - url: https://api.bookstore.com/v2
    description: Production
  - url: https://sandbox.api.bookstore.com/v2
    description: Sandbox
security:
  - BearerAuth: []
paths:
  /books:
    get:
      summary: List books
      description: Get a paginated list of books with optional filters
      operationId: listBooks
      tags:
        - Books
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: genre
          in: query
          schema:
            type: string
            enum: [fiction, non-fiction, science, technology, business, biography]
        - name: author
          in: query
          schema:
            type: string
        - name: search
          in: query
          description: Search in title, author, or ISBN
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
  /books/{bookId}:
    get:
      summary: Get book details
      operationId: getBook
      tags:
        - Books
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetail'
        '404':
          $ref: '#/components/responses/NotFound'
  /books/{bookId}/reviews:
    get:
      summary: Get book reviews
      description: Get reviews for a specific book
      operationId: getBookReviews
      tags:
        - Reviews
      parameters:
        - $ref: '#/components/parameters/BookId'
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Reviews retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Add book review
      operationId: addBookReview
      tags:
        - Reviews
      parameters:
        - $ref: '#/components/parameters/BookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
                - comment
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                title:
                  type: string
                  maxLength: 100
                comment:
                  type: string
                  maxLength: 1000
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /cart:
    get:
      summary: Get cart contents
      operationId: getCart
      tags:
        - Cart
      responses:
        '200':
          description: Cart retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /cart/items:
    post:
      summary: Add item to cart
      operationId: addToCart
      tags:
        - Cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookId
                - quantity
              properties:
                bookId:
                  type: string
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '201':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/BadRequest'
  /orders:
    get:
      summary: List orders
      operationId: listOrders
      tags:
        - Orders
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Orders retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Create order
      operationId: createOrder
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shippingAddress
                - paymentMethod
              properties:
                shippingAddress:
                  $ref: '#/components/schemas/Address'
                paymentMethod:
                  type: string
                  enum: [credit_card, paypal, bank_transfer]
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/login:
    post:
      summary: Login
      description: Authenticate and receive access token
      operationId: login
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Invalid credentials
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        price:
          type: number
          format: double
        genre:
          type: string
        coverImage:
          type: string
          format: uri
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
        inStock:
          type: boolean
    BookDetail:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            description:
              type: string
            publisher:
              type: string
            publicationDate:
              type: string
              format: date
            pages:
              type: integer
            language:
              type: string
    Review:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        userName:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        title:
          type: string
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
    Cart:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total:
          type: number
          format: double
    CartItem:
      type: object
      properties:
        id:
          type: string
        book:
          $ref: '#/components/schemas/Book'
        quantity:
          type: integer
        price:
          type: number
          format: double
    Order:
      type: object
      properties:
        id:
          type: string
        orderNumber:
          type: string
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        total:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
    Address:
      type: object
      required:
        - street
        - city
        - state
        - zipCode
        - country
      properties:
        street:
          type: string
        street2:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        country:
          type: string
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
  parameters:
    BookId:
      name: bookId
      in: path
      description: Book identifier
      required: true
      schema:
        type: string
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Books
    description: Book catalog operations
  - name: Cart
    description: Shopping cart management
  - name: Orders
    description: Order processing
  - name: Reviews
    description: Book reviews and ratings
  - name: Authentication
    description: User authentication
