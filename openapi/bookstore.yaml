openapi: 3.0.3
info:
  title: Bookstore API
  description: |
    E-commerce API for an online bookstore with advanced features.
    
    ## Features
    - Book catalog with search and filtering
    - Shopping cart management  
    - Order processing with payment integration
    - User reviews and ratings
    - Inventory tracking
    - Wishlist functionality
    
    ## Authentication
    
    This API uses OAuth 2.0 for authentication. Obtain an access token using the authorization code flow.
    
  version: 2.0.0
  termsOfService: https://bookstore.example.com/terms
  contact:
    name: Bookstore API Team
    email: api@bookstore.example.com
    url: https://bookstore.example.com/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.bookstore.example.com/v2
    description: Production server
  - url: https://sandbox-api.bookstore.example.com/v2
    description: Sandbox server

tags:
  - name: books
    description: Book catalog operations
  - name: cart
    description: Shopping cart management
  - name: orders
    description: Order processing
  - name: reviews
    description: Book reviews and ratings
  - name: users
    description: User account management
  - name: wishlist
    description: User wishlist operations

paths:
  /books:
    get:
      tags:
        - books
      summary: Search and browse books
      description: Returns a paginated list of books with advanced filtering options
      operationId: searchBooks
      parameters:
        - name: q
          in: query
          description: Search query (searches in title, author, ISBN)
          schema:
            type: string
          example: "Harry Potter"
        - name: author
          in: query
          description: Filter by author name
          schema:
            type: string
        - name: category
          in: query
          description: Filter by category
          schema:
            type: array
            items:
              type: string
              enum: [fiction, non-fiction, science, technology, history, biography, children, romance, mystery, fantasy]
          style: form
          explode: true
        - name: priceMin
          in: query
          description: Minimum price filter
          schema:
            type: number
            format: float
            minimum: 0
        - name: priceMax
          in: query
          description: Maximum price filter
          schema:
            type: number
            format: float
            minimum: 0
        - name: inStock
          in: query
          description: Filter only books in stock
          schema:
            type: boolean
            default: false
        - name: sortBy
          in: query
          description: Sort results by field
          schema:
            type: string
            enum: [relevance, title, price_asc, price_desc, rating, newest, bestselling]
            default: relevance
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 10
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookSummary'
                  pagination:
                    $ref: '#/components/schemas/PaginationMeta'
                  facets:
                    $ref: '#/components/schemas/SearchFacets'
              example:
                data:
                  - id: "978-0-7475-3269-9"
                    title: "Harry Potter and the Philosopher's Stone"
                    author: "J.K. Rowling"
                    price: 12.99
                    currency: "USD"
                    coverImage: "https://example.com/covers/hp1.jpg"
                    rating: 4.8
                    reviewCount: 15420
                    inStock: true
                pagination:
                  page: 1
                  limit: 20
                  total: 245
                  totalPages: 13
                facets:
                  categories:
                    - name: "Fantasy"
                      count: 89
                    - name: "Fiction"
                      count: 156
                  priceRanges:
                    - range: "0-10"
                      count: 45
                    - range: "10-20"
                      count: 120
                    - range: "20+"
                      count: 80
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /books/{isbn}:
    get:
      tags:
        - books
      summary: Get book details
      description: Returns detailed information about a specific book
      operationId: getBookByISBN
      parameters:
        - name: isbn
          in: path
          description: ISBN-13 of the book
          required: true
          schema:
            type: string
            pattern: '^978-[0-9]{1}-[0-9]{4}-[0-9]{4}-[0-9]{1}$'
          example: "978-0-7475-3269-9"
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cart:
    get:
      tags:
        - cart
      summary: Get current cart
      description: Returns the current user's shopping cart
      operationId: getCart
      responses:
        '200':
          description: Shopping cart contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - oauth2: [read]

    post:
      tags:
        - cart
      summary: Add item to cart
      description: Adds a book to the shopping cart
      operationId: addToCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isbn
                - quantity
              properties:
                isbn:
                  type: string
                  description: ISBN of the book to add
                quantity:
                  type: integer
                  minimum: 1
                  default: 1
            example:
              isbn: "978-0-7475-3269-9"
              quantity: 2
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Insufficient stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth2: [write]

  /cart/items/{itemId}:
    patch:
      tags:
        - cart
      summary: Update cart item quantity
      description: Updates the quantity of an item in the cart
      operationId: updateCartItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 0
                  description: New quantity (0 to remove)
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - oauth2: [write]

    delete:
      tags:
        - cart
      summary: Remove item from cart
      description: Removes an item from the shopping cart
      operationId: removeFromCart
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - oauth2: [write]

  /orders:
    get:
      tags:
        - orders
      summary: List user orders
      description: Returns a list of orders for the authenticated user
      operationId: listOrders
      parameters:
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 10
            maximum: 50
            default: 20
      responses:
        '200':
          description: Order list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderSummary'
                  pagination:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - oauth2: [read]

    post:
      tags:
        - orders
      summary: Create order from cart
      description: Creates a new order from the current cart contents
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          headers:
            Location:
              description: URL of the created order
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          description: Cart is empty or validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - oauth2: [write]

  /books/{isbn}/reviews:
    get:
      tags:
        - reviews
      summary: Get book reviews
      description: Returns reviews for a specific book
      operationId: getBookReviews
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [newest, oldest, rating_high, rating_low, helpful]
            default: helpful
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 10
            maximum: 50
            default: 20
      responses:
        '200':
          description: Review list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  pagination:
                    $ref: '#/components/schemas/PaginationMeta'
                  summary:
                    $ref: '#/components/schemas/ReviewSummary'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - reviews
      summary: Create a review
      description: Creates a new review for a book
      operationId: createReview
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
                - title
                - content
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                title:
                  type: string
                  maxLength: 100
                content:
                  type: string
                  minLength: 50
                  maxLength: 5000
                verified_purchase:
                  type: boolean
                  readOnly: true
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: User already reviewed this book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - oauth2: [write]

components:
  schemas:
    BookSummary:
      type: object
      properties:
        id:
          type: string
          description: ISBN-13
        title:
          type: string
        author:
          type: string
        price:
          type: number
          format: float
        currency:
          type: string
          enum: [USD, EUR, GBP]
        coverImage:
          type: string
          format: uri
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
        reviewCount:
          type: integer
        inStock:
          type: boolean

    BookDetail:
      allOf:
        - $ref: '#/components/schemas/BookSummary'
        - type: object
          properties:
            description:
              type: string
            publisher:
              type: string
            publicationDate:
              type: string
              format: date
            pages:
              type: integer
            language:
              type: string
            categories:
              type: array
              items:
                type: string
            dimensions:
              type: object
              properties:
                height:
                  type: number
                width:
                  type: number
                thickness:
                  type: number
                unit:
                  type: string
                  enum: [cm, in]
            weight:
              type: object
              properties:
                value:
                  type: number
                unit:
                  type: string
                  enum: [g, oz]
            stock:
              type: object
              properties:
                available:
                  type: integer
                warehouse:
                  type: array
                  items:
                    type: object
                    properties:
                      location:
                        type: string
                      quantity:
                        type: integer

    Cart:
      type: object
      properties:
        id:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        subtotal:
          type: number
          format: float
        tax:
          type: number
          format: float
        shipping:
          type: number
          format: float
        total:
          type: number
          format: float
        currency:
          type: string
          enum: [USD, EUR, GBP]
        itemCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        book:
          $ref: '#/components/schemas/BookSummary'
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          format: float
        subtotal:
          type: number
          format: float

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderNumber:
          type: string
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shipping:
          $ref: '#/components/schemas/ShippingDetails'
        billing:
          $ref: '#/components/schemas/BillingDetails'
        payment:
          $ref: '#/components/schemas/PaymentDetails'
        totals:
          type: object
          properties:
            subtotal:
              type: number
            tax:
              type: number
            shipping:
              type: number
            total:
              type: number
            currency:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderNumber:
          type: string
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        total:
          type: number
        currency:
          type: string
        itemCount:
          type: integer
        createdAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        isbn:
          type: string
        title:
          type: string
        author:
          type: string
        price:
          type: number
        quantity:
          type: integer
        subtotal:
          type: number

    CreateOrderRequest:
      type: object
      required:
        - shipping
        - billing
        - payment
      properties:
        shipping:
          $ref: '#/components/schemas/ShippingDetails'
        billing:
          $ref: '#/components/schemas/BillingDetails'
        payment:
          $ref: '#/components/schemas/PaymentMethod'
        giftMessage:
          type: string
          maxLength: 500
        promoCode:
          type: string

    ShippingDetails:
      type: object
      required:
        - firstName
        - lastName
        - address1
        - city
        - state
        - postalCode
        - country
      properties:
        firstName:
          type: string
        lastName:
          type: string
        company:
          type: string
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        phone:
          type: string
        instructions:
          type: string

    BillingDetails:
      type: object
      required:
        - firstName
        - lastName
        - address1
        - city
        - state
        - postalCode
        - country
      properties:
        sameAsShipping:
          type: boolean
          default: true
        firstName:
          type: string
        lastName:
          type: string
        company:
          type: string
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string

    PaymentMethod:
      type: object
      required:
        - type
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
          enum: [credit_card, paypal, apple_pay, google_pay]
      oneOf:
        - $ref: '#/components/schemas/CreditCardPayment'
        - $ref: '#/components/schemas/PayPalPayment'
        - $ref: '#/components/schemas/DigitalWalletPayment'

    CreditCardPayment:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          required:
            - cardNumber
            - expiryMonth
            - expiryYear
            - cvv
            - cardholderName
          properties:
            cardNumber:
              type: string
              pattern: '^[0-9]{13,19}$'
            expiryMonth:
              type: integer
              minimum: 1
              maximum: 12
            expiryYear:
              type: integer
            cvv:
              type: string
              pattern: '^[0-9]{3,4}$'
            cardholderName:
              type: string

    PayPalPayment:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          required:
            - returnUrl
            - cancelUrl
          properties:
            returnUrl:
              type: string
              format: uri
            cancelUrl:
              type: string
              format: uri

    DigitalWalletPayment:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          required:
            - token
          properties:
            token:
              type: string
              description: Payment token from wallet provider

    PaymentDetails:
      type: object
      properties:
        method:
          type: string
        status:
          type: string
          enum: [pending, authorized, captured, failed, refunded]
        transactionId:
          type: string
        amount:
          type: number
        currency:
          type: string
        processedAt:
          type: string
          format: date-time

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rating:
          type: integer
          minimum: 1
          maximum: 5
        title:
          type: string
        content:
          type: string
        author:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            verified_purchase:
              type: boolean
        helpful:
          type: object
          properties:
            yes:
              type: integer
            no:
              type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ReviewSummary:
      type: object
      properties:
        averageRating:
          type: number
          format: float
        totalReviews:
          type: integer
        ratingDistribution:
          type: object
          properties:
            '1':
              type: integer
            '2':
              type: integer
            '3':
              type: integer
            '4':
              type: integer
            '5':
              type: integer

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    SearchFacets:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer
        priceRanges:
          type: array
          items:
            type: object
            properties:
              range:
                type: string
              count:
                type: integer
        authors:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
                  code:
                    type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.bookstore.example.com/oauth/authorize
          tokenUrl: https://auth.bookstore.example.com/oauth/token
          scopes:
            read: Read access to protected resources
            write: Write access to protected resources

security:
  - oauth2: []