openapi: 3.0.3
info:
  title: Pet Store API
  description: A simple API for managing pets in a pet store
  version: 1.0.0
  contact:
    name: API Support
    email: support@petstore.com
servers:
  - url: https://api.petstore.com/v1
    description: Production server
  - url: https://staging.api.petstore.com/v1
    description: Staging server
paths:
  /pets:
    get:
      summary: List all pets
      description: Returns a list of all available pets in the store
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of pets to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by pet status
          required: false
          schema:
            type: string
            enum: [available, pending, sold]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new pet
      description: Add a new pet to the store inventory
      operationId: createPet
      tags:
        - pets
      requestBody:
        description: Pet object to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
  /pets/{petId}:
    get:
      summary: Get a pet by ID
      description: Returns a single pet
      operationId: getPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a pet
      description: Update an existing pet in the store
      operationId: updatePet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Pet object with updated information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
      security:
        - ApiKeyAuth: []
    delete:
      summary: Delete a pet
      description: Remove a pet from the store
      operationId: deletePet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
  /pets/{petId}/photos:
    post:
      summary: Upload pet photo
      operationId: uploadPetPhoto
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of pet
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                description:
                  type: string
              required:
                - file
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoId:
                    type: string
                  url:
                    type: string
        '404':
          description: Pet not found
        '413':
          description: File too large
      security:
        - ApiKeyAuth: []
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - category
        - status
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Fluffy
        category:
          type: string
          enum: [dog, cat, bird, fish, other]
          example: cat
        breed:
          type: string
        age:
          type: integer
          description: Age in years
        status:
          type: string
          enum: [available, pending, sold]
        price:
          type: number
          format: double
          example: 299.99
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NewPet:
      type: object
      required:
        - name
        - category
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        category:
          type: string
          enum: [dog, cat, bird, fish, other]
        breed:
          type: string
          maxLength: 100
        age:
          type: integer
          minimum: 0
          maximum: 50
        price:
          type: number
          format: double
          minimum: 0
        tags:
          type: array
          items:
            type: string
          maxItems: 10
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
tags:
  - name: pets
    description: Pet management operations
